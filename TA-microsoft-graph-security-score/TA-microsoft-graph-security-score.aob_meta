{"basic_builder": {"appname": "TA-microsoft-graph-security-score", "friendly_name": "Microsoft Graph Security Score AddOn", "version": "1.0.0", "author": "CrossRealms International", "description": "This Add-on pulls secure score from Microsoft Graph Security API.", "theme": "#65A637", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAJAAAAAAqDuP8AAADRklEQVRYCe2XCU8iQRCFCwTxxgM1KmIAEf7/r1ERvOIBCngSFZHN10mN7WboZtaN2U14yTBHd1e9qX5VNYiM8Z9FIGbz3d/fH9j3P3VdqVQCHvGfcjqqnzEhX6QSvgm+8enpaRkMBhKPx+X9/V3e3t58S5zjkQhNTExIsViU19dX6Xa7sry8LI+Pj3J5eWmcbG1tydzcnLRaLYEox9HRkXx8fDhJ2IORCOGsWq2aiGDk5ubGtiUXFxdf7ona7OysIf1lwHETidDq6qo8PDwYc7FYTNbX1yWdTgfmiUSj0QjmMLC2tvZ3CbFN8/PzkslkTPhxsrOzI8/Pz3J9fW0OnikgWigUpNlsytPTk9RqNbPN7XZb7u7ugujq/N/P3rRHM/f398Ywi8vlspyensrt7a2USiXJ5/OBzc3NTeP85OREILaxsWHGjo+PpdPpyO7ubjB32IWXEAImizggcHBwYGxNTk6KOlbjRBIRozXEToR4pqLu9Xo6dejZS4hsAjghMlEAKbZaofrT+7CzlxCpDUhprTGLi4uytLQU2MOp7Zio6DqiyHxAUvjgzDLqCG8JECXAMXWGLQT1et2c+UFXQNM/l8vJ2dmZyTQETbSnpqbk5eXFzAv7cUYIpxQ96gl6AP1+PyATZtB+RuW2cX5+LmStC05CEAFkjAqTjJuZmXHZNGOsJSpA13KNLRechHhDtENUCDXAuGrCZZiCqQmhUWELyVoXnIQQMdkFVlZWAjuI1gebtG43mvSlvpMQThEwsIXoe0vmU6cAxLT5Ur198BLirQBGtSpjOJVKDbXNFmnjpTxoRi4sLAxdowMjEUKgHFdXV6aWoA0aKyUgkfisHMlk0kQkm82aMrG3tye0DQgiZo2aOg87ewnRCviEIDpsG3WJ5kp9oe5ov8I42UdmUYcgc3h4aHwiZm0rYSTsZ5+vZz+1rskqSHDQaHljWsj29raJjq0t5tJ8+QqADJGBDGtGhZeQbYhqrTWFIgfslsG2aPNljLmaFNyPgkiE2A46PqlLo6Q3ca0tA3JsIaJHwGiGLY+CL2XzT/4oUjDZGkTP9vnqTBg5+49ipAiFGbM1FDYe9Zk3y6Ia/O78MaHvRnC8/p+LwC/HOI76vxDXowAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.0.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "GraphSecurity:Score", "interval": "7200", "use_external_validation": true, "streaming_mode_xml": true, "name": "graph_security_score_input", "title": "Graph Security Score Input", "description": "", "type": "customized", "parameters": [{"required": true, "name": "azure_ad_tenant_id", "label": "Azure AD Tenant ID", "default_value": "", "placeholder": "", "help_string": "", "type": "text", "format_type": "text", "value": ""}, {"required": true, "name": "application_id", "label": "Application Id", "default_value": "", "placeholder": "", "help_string": "", "type": "text", "format_type": "text", "value": ""}, {"required": true, "name": "client_secret", "label": "Client Secret", "placeholder": "", "default_value": "", "help_string": "", "type": "password", "format_type": "password", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "azure_ad_tenant_id", "title": "Azure AD Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "application_id", "title": "Application Id", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "client_secret", "title": "Client Secret", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}], "code": "import time\nimport datetime\nimport urllib\nimport splunk.entity\nimport splunk.appserver.mrsparkle.lib.util as splunk_lib_util\nfrom datetime import datetime\nimport os\nimport sys\nimport json\n\nGRAPH_ALERTS_URL = 'https://graph.microsoft.com/v1.0/security/secureScores'\nACCESS_TOKEN = 'access_token'\nCLIENT_ID = 'client_id'\nCLIENT_SECRET = 'client_secret'\nLOCK_FILE = 'not_first.lock'\nADDON_NAME = 'TA-microsoft-graph-security-score'\nLOCK_FILE_PATH = splunk_lib_util.make_splunkhome_path([\"etc\", \"apps\", ADDON_NAME, \"bin\", LOCK_FILE])\n\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n\n    interval_in_seconds = int(definition.parameters.get('interval'))\n    if interval_in_seconds < 300:\n        raise ValueError(\"field 'Interval' should be at least 300\")\n    pass\n\ndef get_access_token(helper,application_id,secret,tenant):\n    data = {\n        CLIENT_ID: application_id,\n        'scope': 'https://graph.microsoft.com/.default',\n        CLIENT_SECRET: secret,\n        'grant_type': 'client_credentials'\n        }\n    url = 'https://login.microsoftonline.com/' + tenant + '/oauth2/v2.0/token'\n    if (sys.version_info > (3, 0)):\n        access_token = helper.send_http_request(url, \"POST\", payload=urllib.parse.urlencode(data), timeout=(15.0, 15.0)).json()\n    else:\n        access_token = helper.send_http_request(url, \"POST\", payload=urllib.urlencode(data), timeout=(15.0, 15.0)).json()\n    return access_token[ACCESS_TOKEN]\n\n    pass\n\ndef get_app_version(helper):\n    app_version = \"\"\n    if 'session_key' in helper.context_meta:\n        session_key = helper.context_meta[\"session_key\"]\n        entity = splunk.entity.getEntity('/configs/conf-app','launcher', namespace=helper.get_app_name(), sessionKey=session_key, owner='nobody')\n        app_version = entity.get('version')\n    return app_version\n\n        \ndef get_epoch_time(data):\n    utc_time = datetime.strptime(data, \"%Y-%m-%dT%H:%M:%SZ\")\n    epoch_time = (utc_time - datetime(1970, 1, 1)).total_seconds()\n    return epoch_time\n\n\ndef write_events(helper,ew,data):\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(data),time=get_epoch_time(data.get(\"createdDateTime\")))\n    ew.write_event(event)\n\n\ndef check_lock_file(date=None):\n    try:\n        if date==None:\n            if(os.path.exists(LOCK_FILE_PATH)):\n                f=open(LOCK_FILE_PATH, \"r\")\n                if f.mode == 'r':\n                    date =f.read()\n                    return date\n            else:\n                return \"False\"\n        else:\n            with open(LOCK_FILE_PATH, 'w') as fp:\n                fp.write(date)\n\n    except Exception as e:\n        raise\n\n\ndef collect_events(helper, ew):\n    try:\n        opt_azure_ad_tenant_id = helper.get_arg('azure_ad_tenant_id')\n        opt_application_id = helper.get_arg('application_id')\n        stanza_name = helper.get_input_stanza_names()\n        input_stanza = helper.get_input_stanza()\n        opt_client_secret = input_stanza.get(stanza_name).get(\"client_secret\")\n\n        # set the log level for this modular input\n        # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n        log_level = helper.get_log_level()\n        helper.set_log_level(log_level)\n\n        access_token = get_access_token(helper,opt_application_id,opt_client_secret,opt_azure_ad_tenant_id)\n        headers = {\"Authorization\": \"Bearer \" + access_token,\n                    \"User-Agent\": \"MicrosoftGraphSecuritySecureScore-Splunk/\" + get_app_version(helper)}\n\n        response = helper.send_http_request(GRAPH_ALERTS_URL, \"GET\", headers=headers, timeout=(15.0, 15.0)).json()\n        helper.log_debug(\"got response\")\n        if \"error\" in response:\n            helper.log_info(\"Make sure your app with id {} has the Microsoft Graph \\\"SecurityEvents.Read.All\\\" permission and your tenant admin has given your application admin consent\".format(opt_application_id))\n            raise ValueError(\"Error occurred : \" + json.dumps(response, indent=4))\n\n        else:\n            helper.log_debug(\"in else condition\")\n            helper.log_debug(log_level)\n            if(log_level!=\"DEBUG\"):\n                helper.log_debug(\"else -> not debug mode\")\n                checkpoint = check_lock_file()\n                if checkpoint != \"False\":\n                    last_date = checkpoint\n                    latest_date = \"\"\n                    for data in response.get('value'):\n                        if latest_date==\"\":\n                            latest_date = data.get(\"id\").split(\"_\")[1]\n                            check_lock_file(latest_date)\n                        if latest_date!=\"\" and data.get(\"id\").split(\"_\")[1]==latest_date and latest_date!=last_date:\n                            write_events(helper,ew,data)\n\n                else:\n                    first_event = 0\n                    for data in response.get('value'):\n                        if first_event == 0:\n                            check_lock_file(data.get(\"id\").split(\"_\")[1])\n                            first_event = 1\n                        write_events(helper,ew,data)\n            else:\n                for data in response.get('value'):\n                    write_events(helper,ew,data)\n\n\n    except Exception as e:\n        helper.log_error(\"From Exception : {}\".format(e))\n", "customized_options": [{"name": "azure_ad_tenant_id", "value": "0b8a5d53-6026-4814-b1b0-81159159fccb"}, {"name": "application_id", "value": "4c88354c-0d20-4ba3-a638-54b3dc558e85"}], "uuid": "0dca234c6151454cb8dfa66134b19494"}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}}}, "sourcetype_builder": {"GraphSecurity:Score": {"metadata": {"event_count": 0, "data_input_name": "graph_security_score_input", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1628590653_55"}}